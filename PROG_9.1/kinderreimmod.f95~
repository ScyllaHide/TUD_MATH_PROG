MODULE KINDERREIMMOD
    IMPLICIT NONE
    PUBLIC
    
    TYPE CHILD
        CHARACTER(LEN=10)    :: NAME
        INTEGER              :: ALTER
        TYPE(CHILD), POINTER :: NEXT
    END TYPE

    SUBROUTINE BUILD_CYCLE(filename, start)
        CHARCTER(LEN=50), INTENT(IN)      :: filename
        TYPE(CHILD), POINTER, INTENT(OUT) :: start
        TYPE(CHILD)                       :: readchild
        CALL INIT_CYCLE

        OPEN(UNIT=33, FILE=filename, IOSTAT=ios, ACTION="READ")
        
        IF (ios == 0) THEN

           ! Reading parts
           DO i = 1 , m*n
               READ(33, *, iostat=err) readchild 
               
               IF (err /= 0) THEN
                   WRITE(*,*) "ERROR: No part is read."
                   EXIT
               END IF

              TEILELISTE(i) = zeile

           END DO

        ELSE
           WRITE(*,*) "ERROR: Cannot open the input file."
        END IF

        CLOSE(UNIT=33)
    END SUBROUTINE BUILD_CYCLE
 
    FUNCTION CONS(NAME, ALTER, NEXT)
        CHARCTER(LEN=10), INTENT(IN) :: NAME
        INTEGER,          INTENT(IN) :: ALTER
        TYPE(CHILD),      POINTER    :: NEXT
        TYPE(CHILD)                  :: CONS

        ALLOCATE(CONS)
        CONS%NAME  =  NAME
        CONS&ALTER =  ALTER
        CONS%NEXT  => NEXT
    END FUNCTION CONS

    SUBROUTINE ANFUEGEN(PRE, NAME, ALTER)
        TYPE(CHILD),       INTENT(IN) :: LIST
        CHARACTER(LEN=10), INTENT(IN) :: NAME
        INTEGER,           INTENT(IN) :: ALTER
        TYPE(CHILD),       POINTER    :: NEWCHILD

        IF(.NOT. ASSOCIATED(LIST%NEXT)) THEN
            CALL ANFUEGEN(LIST%NEXT, NAME, ALTER)
        ELSE
            ALLOCATE(NEWCHILD)
            NEWCHILD%NAME  =  NAME
            NEWCHILD%ALTER =  ALTER
            NEWCHILD%NEXT  => NULL
            LIST%NEXT      => NEWCHILD
        END IF

        
