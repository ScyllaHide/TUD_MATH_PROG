MODULE TRILMOD

	IMPLICIT NONE
	PRIVATE
	PUBLIC :: TRILOG, FALSE, MAYBE, TRUE, TEXT, OPERATOR(.AND.), OPERATOR(.OR.), OPERATOR(.NOT.), OPERATOR(==)
	
	!type definition
	TYPE TRILOG
		PRIVATE
		INTEGER :: NUM
	END TYPE TRILOG
	
	!constant values
	TYPE(TRILOG), PARAMETER :: FALSE = TRILOG(-1), &
	&						   MAYBE = TRILOG(0) , &
	&						   TRUE  = TRILOG(1)
	
	!=====================INTERFACES=====================!
	
	INTERFACE OPERATOR (.AND.)
		MODULE PROCEDURE AND
	END INTERFACE
	
	INTERFACE OPERATOR (.OR.)
		MODULE PROCEDURE OR
	END INTERFACE
	
	INTERFACE OPERATOR (.NOT.)
		MODULE PROCEDURE NOT
	END INTERFACE
	
	INTERFACE OPERATOR (==)
		MODULE PROCEDURE EQUAL
	END INTERFACE
	
	INTERFACE TEXT	
		MODULE PROCEDURE TEXT
	END INTERFACE
	
	CONTAINS
	
	!=================FUNCTION/SUBROUTINE=================!
	
	FUNCTION AND (TRIL1,TRIL2)
		TYPE(TRILOG), INTENT(IN) :: TRIL1,TRIL2
		TYPE(TRILOG)             :: AND
		
		AND%NUM = MIN(TRIL1%NUM, TRIL2%NUM)
	END FUNCTION AND
	
	FUNCTION OR (TRIL1,TRIL2)
		TYPE(TRILOG), INTENT(IN) :: TRIL1,TRIL2
		TYPE(TRILOG)             :: OR
		
		OR%NUM = MAX(TRIL1%NUM, TRIL2%NUM)
	END FUNCTION OR
	
	FUNCTION NOT (TRIL)
		TYPE(TRILOG), INTENT(IN) :: TRIL
		TYPE(TRILOG)             :: NOT
		
		NOT%NUM = (-1) * TRIL%NUM
	END FUNCTION NOT
	
	FUNCTION EQUAL (TRIL1,TRIL2) 	!logical function
		TYPE(TRILOG), INTENT(IN) :: TRIL1,TRIL2
		LOGICAL		             :: EQUAL
		
		EQUAL = (TRIL1%NUM == TRIL2%NUM) !comparison of integers
	END FUNCTION EQUAL
	
	FUNCTION TEXT(TRIL)
		TYPE(TRILOG), INTENT(IN) :: TRIL
		CHARACTER (LEN = 1)      :: TEXT
		
		IF(TRIL%NUM == (-1)) THEN
			TEXT = "F"
		ELSEIF(TRIL%NUM == 0) THEN
			TEXT = "?"
		ELSE 
			TEXT = "T"
		END IF
		
		!WRITE(*,*) TEXT
	END FUNCTION
	
END MODULE
	